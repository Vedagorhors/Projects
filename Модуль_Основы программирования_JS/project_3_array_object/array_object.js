// Массивы

let array = [1, 'строка', true, false];
// console.log(array);
console.log(array[0]); // 1. В массивах к каждому элементу массива обращаемся указав инекс нужного элемента.
// Элементы в массиве нумеруются начиная с нуля: 0 - 1; 1 - строка; 2 - true; 3 - false 
console.log(array[1]); // строка
console.log(array[3]); // false

// Объекты

let object = {
    cat: 'Мурзик',
    dog: 'Шарик',
    number: 23,
    array: [1, 2, 3]
};
console.log(object.cat); // Мурзик. В объекта к каждому элементу объекта обращаемся указав ключ элемента.
// cat - Мурзик; dog - Шарик; number - 23, array - [1, 2, 3] 
console.log(object.array); // [1, 2, 3] 
console.log(object.array[2]); // 3. Данные массива внутри объекта мы можем получить так же указав конкретный индекс элемента массива от 0 до ...


// Условные ветвления. Операторы условия
if (10 > 5) {
    console.log('Ура, код выполнился!');
}

if (10 < 5) {
    console.log('Ура, код выполнился!'); // Если выражение в условной конструкции () возвращает  истину true, то выводится сообщение что идет после условия в {}
} else {console.log('Выражение ложно')};  // Если выражение в условной конструкции () возвращает  ложь false, то выводится сообщение что идет в else {}




// Логические операторы

// Логический И  &&

if (5 > 3 && 7 === 7) {
    console.log('Ура, код выполнился!') 
};
// выведется выражение в {}, если в условной конструкции в () и слева и справа условия будут true и вместе дадут true
// Если хотя бы одно условие false, то оба условия будут считаться false и выражение в {} не выведется в консоль



// Логический ИЛИ  ||

if (5 > 3 || 7 === 8) {
    console.log('Ура, код выполнился!') 
};
// выведется выражение в {}, если в условной конструкции в () или слева или справа или и слева и справа условие будет true, что вместе даст true
// Если оба условия false, то оба условия будут считаться false выражение в {} не выведется в консоль


// Циклы
// Цикл состоит из следующей конструкции в (): 
// 1 - инициализация (создание счетчика) 
// 2 - условие при котором наш цикл будет работать. Если условие true, то цикл продолжает работу, если false, то цикл прекращает работу
// 3 - завершающая результирующая операция, она будет выполнятся тогда, когда будет заканчиваться цикл. i = i + 1 , 
// то есть мы поднимаем наш итератор i на 1, чтобы аш цикл продолжал работу
// Цикл: таким образом мы создали - создай нам счетчик с 0 значением, крути цикл до тех пор, пока счетчик не станет равным 10
// и каждый конец цикла прибавляй к счётчику 1
// Тело цикла в {} - в теле пишется именно то, что должно выполняться, в нашем случае, ровно 10 раз, а точнее пока наш счётчик не будет равен 10

for (let i = 0; i < 10; i = i + 1) {
console.log(i)
}
// выведутся по очереди цифры с 0 до 9, так как наш счётчик начинался с нуля, поэтому и числа выводятся с нуля, всего 10 чисел

// Пример: нужно в интернет магазине к массиву цен пприбавить скидку 10%, то есть нам от цены нужно отнять 10%

// let price = [100, 200, 300];
// price[0] = price[0] * 0.9;
// price[1] = price[1] * 0.9;
// price[2] = price[2] * 0.9;
// console.log(price);

// Домашнее задание: сделать ту же задачу для большого количества цен, например 10 цен и у каждой нужно применить скидку 10% и сделать это в цикле
let price = [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000];
for (i = 0; i < 10; i++) {
    price[i] = price[i] * 0.9
}
console.log(price);

// Задание #1

// Вариант 1 (мой, тоже верный)

// let prices = [100, 200, 300];

// for (let i = 0; i < 3; i++) {
//   prices[i] = prices[i] * 0.9
// }

// Вариант 2 (Юрий Карелин подсказал, здесь более рациональная запись)
console.log('задание #1', prices);


let prices = [100, 200, 300];

for (let i = 0; i < prices.length; i++) {
  prices[i] *= 0.9
}

console.log('задание #1', prices);

// Функции function
// 1 пишем function, затем название придумываем функции, созвучное с темой выполняемой задачи, getDetails - т.е. вернуть детали
// , а затем в () пишем параметры, которые хотим передать внутрь функции, например - количество коробок с деталями boxes  
// и затем в {} писать тело функции
// Функция принимает ккие-то праметры и возвращает посчитанное знаение.
// Функции помогают заключить в ней какой-то функционал и затем использовать их в разных местах и не повторять этот код.
// И если нам нужно поменять это функционал, то нам потребуется его изменить только в одном месте внутри этой функции, 
// чтобы наш код работал правильно везде, где эта функция используется. Функция применяется когда у нас много одинаковых формул используется в разныч частях кода и чтобы их поменять везде достаточно 
// поменять в одном месте в функции.
// с помощью return мы можем вернуть какое-то значение из этой функции
// в теле функции в return  мы заменяем количество коробок на boxes, то есть коробки теперь будет не просто числом, а как раз тем параметром,
// который к нам и прийдёт в функцию, когда мы захотим её использовать

function getDetails(boxes) {
    return boxes * 50 * 0.8
}

let store = getDetails(1000);
let store2 = getDetails(5000);
let store3 = getDetails(15000);

console.log(store);
console.log(store2);
console.log(store3);
