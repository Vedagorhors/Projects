// Перепишите функцию, используя оператор '?' или '||'
// важность: 4
// Следующая функция возвращает true, если параметр age больше 18.

// В ином случае она задаёт вопрос confirm и возвращает его результат.

// function checkAge(age) {
//   if (age > 18) {
//     return true;
//   } else {
//     return confirm("Родители разрешили?");
//   }
// }

// второй вариант без else тоже верный
// function checkAge(age) {
//   if (age > 18) {
//     return true;
//   }
//   return confirm("Родители разрешили?");
// }

// Перепишите функцию, чтобы она делала то же самое, но без if, в одну строку.

// Сделайте два варианта функции checkAge:

// Используя оператор ?
// Используя оператор ||

// с помощью ?
// function checkAge(age) {
//   return age > 18 ? true : confirm("Родители разрешили?");
// }

// // //  с помощью ||
// function checkAge(age) {
//   return age > 18 || confirm("Родители разрешили?");
// }

// Функция min(a, b)
// важность: 1
// Напишите функцию min(a,b), которая возвращает меньшее из чисел a и b.

// Пример вызовов:

// min(2, 5) == 2
// min(3, -1) == -1
// min(1, 1) == 1

// let a = +prompt("Введите первое число", "");
// let b = +prompt("Введите второе число", "");
// function min(a, b) {
//   if (a <= b) {
//     return a;
//   } else if (a >= b) {
//     return b;
//   }
// }
// let result = min(a, b);
// alert(result);

// let a = +prompt("Введите первое число", "");
// let b = +prompt("Введите второе число", "");
// if (a <= b) {
//   alert(a);
// } else if (a >= b) {
//   alert(b);
// }

// Решение с книги:
// Вариант решения с использованием if:

// function min(a, b) {
//   if (a < b) {
//     return a;
//   } else {
//     return b;
//   }
// }

// return не обязателен, Никита сказал убрать, так правильнее:
// function min(a, b) {
//   if (a < b) {
//     return a;
//   }
//   return b;
// }

// Вариант решения с оператором ?:

// function min(a, b) {
//   return a < b ? a : b;
// }
// P.S. В случае равенства a == b не имеет значения, что возвращать.

// Функция pow(x,n)
// важность: 4
// Напишите функцию pow(x,n), которая возводит x в степень n и возвращает результат.

// pow(3, 2) = 3 * 3 = 9
// pow(3, 3) = 3 * 3 * 3 = 27
// pow(1, 100) = 1 * 1 * ...* 1 = 1
// Создайте страницу, которая запрашивает x и n, а затем выводит результат pow(x,n).

// P.S. В этой задаче функция обязана поддерживать только натуральные значения n, т.е. целые от 1 и выше.

// Первый вариант (мой - работает) решения с конкретными числами, без учета проверок на тип данных (для проверки, что функция работает):
// function pow(x, n) {
//   if (Number.isInteger(x) && Number.isInteger(n)) {
//     // Проверка что введены целые числа
//     return x ** n;
//   }
// }
// let result = pow(2, 3);
// alert(result);

// Второй вариант (мой - работает) с подсказкой DeepSeek
// function pow(x, n) {
//   if (Number.isInteger(x) && Number.isInteger(n)) {
//     return x ** n;
//   }
// }
// Получаю значения от пользователя. Функция parseInt()анализирует строковый аргумент и возвращает целое число
// const num1 = parseInt(prompt("Введите целое число", ""));
// const num2 = parseInt(prompt("Введите степень числа", ""));
// const result = pow(num1, num2);

// alert(result);

// Третий вариант (мой) с проверкой ввода – если пользователь введёт не число, результат будет NaN (с подсказкой DeepSeek)
// function pow(x, n) {
//   if (isNaN(x) || isNaN(n)) {
//     return "Ошибка, введите числа!";
//   }
//   return x ** n;
// }

// Получаю значения от пользователя, преобразовываю в числа (если ввод некорректен, будет NaN). Возможно здесь приведение к Number излишне?
// const input1 = Number(prompt("Введите целое число", ""));
// const input2 = Number(prompt("Введите степень числа", ""));

// const result = pow(input1, input2);
// alert(`Результат: ${result}`);

// Вариант мой последний - не так работает как надо, что-то с проверкой isNaN
// function pow(x, n) {
//   let result = x;
//   for (let i = 1; i < n; i++) {
//     result *= x;
//   }
//   return result;
// }

// // Получаю значения от пользователя, преобразовываю в числа (если ввод некорректен, будет NaN). Возможно здесь приведение к Number излишне?
// const input1 = Number(prompt("Введите целое число", ""));
// const input2 = Number(prompt("Введите степень числа", ""));

// if (isNaN(input1) || isNaN(input2)) {
//   alert("Ошибка, введите числа!");
// }
// const total = pow(input1, input2);
// alert(`Результат: ${total}`);

// Решение из книжки:
// function pow(x, n) {
//   let result = x;

//   for (let i = 1; i < n; i++) {
//     result *= x;
//   }

//   return result;
// }

// let x = prompt("x?", "");
// let n = prompt("n?", "");

// if (n >= 1 && n % 1 == 0) {
//   alert(pow(x, n));
// } else {
//   alert(`Степень ${n} не поддерживается, используйте натуральное число`);
// }

// DeepSeek
// Разбор решения задачи pow(x, n) с комментариями
// Вот подробное объяснение каждой строки кода:

// 1. Функция pow(x, n) — возведение в степень
// javascript
// function pow(x, n) {
//   let result = x;  // Инициализируем результат значением x (для n=1 result уже равен x)

//   for (let i = 1; i < n; i++) {  // Цикл от 1 до n-1 (умножаем x на себя (n-1) раз)
//     result *= x;   // Умножаем result на x на каждой итерации
//   }

//   return result;   // Возвращаем итоговый результат
// }
// Как работает:

// Если n = 1, цикл не выполнится (т.к. 1 < 1 = false), и функция вернёт x.

// Если n = 3, цикл выполнится 2 раза:

// После 1-й итерации: result = x * x

// После 2-й итерации: result = x * x * x

// 2. Запрос ввода у пользователя
// javascript
// let x = prompt("x?", "");  // Запрашиваем основание степени (x)
// let n = prompt("n?", "");  // Запрашиваем показатель степени (n)
// Важно:

// prompt возвращает строку, но в JavaScript при умножении (*) строка автоматически преобразуется в число.

// Если ввести не число, например "abc", то result станет NaN (но в этой задаче это не проверяется).

// 3. Проверка корректности степени n
// javascript
// if (n >= 1 && n % 1 == 0) {  // Проверяем, что n ≥ 1 и целое
//   alert(pow(x, n));          // Если да — выводим результат pow(x, n)
// } else {
//   alert(`Степень ${n} не поддерживается, используйте натуральное число`);  // Иначе — ошибка
// }
// Разбор условий:

// n >= 1 — степень должна быть ≥ 1 (натуральное число).

// n % 1 == 0 — проверка на целое число (остаток от деления на 1 должен быть 0).

// Примеры:

// n = 2 → условие true → вызов pow(x, 2).

// n = 0.5 → n % 1 = 0.5 → условие false → ошибка.

// n = -3 → n >= 1 = false → ошибка.

// Что можно улучшить?
// Проверка ввода x и n на число:
// Сейчас если ввести x = "abc", функция вернёт NaN. Можно добавить проверку:

// javascript
// if (isNaN(x) || isNaN(n)) {
//   alert("Нужно ввести числа!");
//   return;
// }
// Приведение x и n к числу:
// Чтобы явно преобразовать строки в числа:

// javascript
// x = Number(x);
// n = Number(n);
// Оптимизация для n = 0:
// По условию задача не требует обработки n = 0, но если нужно, можно добавить:

// javascript
// if (n === 0) return 1;  // x^0 = 1 для любого x

// Полный код с доп проверками от DeepSeek:
// function pow(x, n) {
//   let result = x;
//   for (let i = 1; i < n; i++) result *= x;
//   return result;
// }

// let x = prompt("x?", "");
// let n = prompt("n?", "");

// // Приводим к числам и проверяем
// x = Number(x);
// n = Number(n);

// if (isNaN(x) || isNaN(n)) {
//   alert("Ошибка: введите числа!");
// } else if (n >= 1 && n % 1 === 0) {
//   alert(pow(x, n));
// } else {
//   alert(`Степень ${n} не поддерживается, введите натуральное число ≥1`);
// }

// Стрелочные функции
// Задача: Перепишите с использованием функции-стрелки. Замените код Function Expression стрелочной функцией:

// function ask(question, yes, no) {
//   if (confirm(question)) yes()
//   else no();
// }

// ask(
//   "Вы согласны?",
//   function() { alert("Вы согласились."); },
//   function() { alert("Вы отменили выполнение."); }
// );

function ask(question, yes, no) {
  if (confirm(question)) yes();
  else no();
}
ask(
  "Вы согласны?",
  () => alert("Вы согласились."),
  () => alert("Вы отменили выполнение.")
);
