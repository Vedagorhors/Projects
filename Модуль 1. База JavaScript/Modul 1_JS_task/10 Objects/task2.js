/* Представьте, что вы разрабатываете программу выдачи талончиков для местной больницы. 
До этого талончики выписывались вручную и вам необходимо оптимизировать данную задачу.
Вам требуется создать функцию giveTalonsInOrder(), которая сортирует очередь из пациентов. Она принимает в себя 2 параметра:
patients — массив объектов. Каждый объект хранит информацию об имени пациента и его уникальном номере — id.
orders — массив уникальных номеров id, который указывает порядок, в котором должны стоять в очереди пациенты.
Функция должна возвращать новый массив, в котором объекты из массива patients будут отсортированы по id из массива orders.
Посмотрите на возможный результат функции giveTalonsInOrder(): 

const ordersArr = [4, 2, 1, 3];
const people = [
   { id: 1, name: "Максим" },
   { id: 2, name: "Николай" },
   { id: 3, name: "Ангелина" },
   { id: 4, name: "Виталий" },
];
 
const result = giveTalonsInOrder(people, ordersArr);
console.log('result', result);
/* Возвращает массив
[
   { id: 4, name: 'Виталий' },
   { id: 2, name: 'Николай' },
   { id: 1, name: 'Максим' },
   { id: 3, name: 'Ангелина' }
]
*/

const giveTalonsInOrder = (patients, orders) => {};

const patientMap = {}; // Создаем объект, где ключ = ID пациента, а значение = весь объект пациента
patients.forEach((patient) => {
  // заполняю объект с помощью forEach (это как сказать “для каждого элемента в массиве сделай что-то”)
  patientMap[patient.id] = patient;
  console.log("patient", patient);
});
const result = []; // Создаем пустой массив для результата
orders.forEach((id) => {
  // Для каждого ID из порядка...
  // Проверяем, существует ли пациент с таким ID:
  // Оператор `in` - проверяет, есть ли такой ключ в объекте
  // Условие `if` - “если условие выполняется, то…”
  if (id in patientMap) {
    // Если пациент с таким ID существует...
    result.push(patientMap[id]);
  }
});
return result;

// окончательное решение
// Объявляем функцию giveTalonsInOrder, которая принимает два параметра:
// patients - массив объектов пациентов с их данными (id и name)
// orders - массив ID в том порядке, в котором должны стоять пациенты
function giveTalonsInOrder(patients, orders) {
  // Шаг 1: Создаем пустой объект для быстрого поиска пациентов по ID
  // Это будет наша "карта" или "телефонная книга" для быстрого доступа
  const patientMap = {};

  // Шаг 2: Заполняем карту соответствий ID -> объект пациента
  // Метод forEach() проходит по каждому элементу массива patients
  patients.forEach((patient) => {
    // Для каждого пациента записываем в карту:
    // ключ = patient.id (номер пациента)
    // значение = patient (весь объект с данными пациента)
    // Квадратные скобки [] позволяют использовать переменную как ключ объекта
    patientMap[patient.id] = patient;
  });

  // После выполнения цикла patientMap будет выглядеть примерно так:
  // {
  //   1: { id: 1, name: "Максим" },
  //   2: { id: 2, name: "Николай" },
  //   3: { id: 3, name: "Ангелина" },
  //   4: { id: 4, name: "Виталий" }
  // }

  // Шаг 3: Создаем пустой массив для хранения результата
  // В этот массив будем добавлять пациентов в правильном порядке
  const result = [];

  // Шаг 4: Проходим по массиву orders в заданном порядке
  // Метод forEach() выполняет функцию для каждого ID из массива orders
  orders.forEach((id) => {
    // Проверяем, существует ли пациент с данным ID в нашей карте
    // Оператор 'in' проверяет, есть ли свойство с таким ключом в объекте
    if (id in patientMap) {
      // Если пациент найден, добавляем его объект в результирующий массив
      // patientMap[id] - обращение к объекту пациента по его ID
      // push() - добавляет элемент в конец массива
      result.push(patientMap[id]);
    }
    // Если пациента с таким ID нет, просто пропускаем этот ID
    // (можно добавить else с обработкой ошибки, если нужно)
  });

  // Шаг 5: Возвращаем готовый отсортированный массив
  // return отдает результат работы функции тому, кто ее вызвал
  return result;
}

// Пример использования функции:

// Исходные данные - массив пациентов
const people = [
  { id: 1, name: "Максим" },
  { id: 2, name: "Николай" },
  { id: 3, name: "Ангелина" },
  { id: 4, name: "Виталий" },
];

// Желаемый порядок ID пациентов
const ordersArr = [4, 2, 1, 3];

// Вызываем нашу функцию и сохраняем результат в переменную
const result = giveTalonsInOrder(people, ordersArr);

// Выводим результат в консоль для проверки
console.log("result", result);

// Результат будет:
// [
//    { id: 4, name: 'Виталий' },
//    { id: 2, name: 'Николай' },
//    { id: 1, name: 'Максим' },
//    { id: 3, name: 'Ангелина' }
// ]

// решение без комментариев
function giveTalonsInOrder(patients, orders) {
  const patientMap = {};

  patients.forEach((patient) => {
    patientMap[patient.id] = patient;
  });

  const result = [];

  orders.forEach((id) => {
    if (id in patientMap) {
      result.push(patientMap[id]);
    }
  });

  return result;
}

const people = [
  { id: 1, name: "Максим" },
  { id: 2, name: "Николай" },
  { id: 3, name: "Ангелина" },
  { id: 4, name: "Виталий" },
];

const ordersArr = [4, 2, 1, 3];

const result = giveTalonsInOrder(people, ordersArr);
console.log("result", result);
