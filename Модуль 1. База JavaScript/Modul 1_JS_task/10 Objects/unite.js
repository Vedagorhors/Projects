// // txt урок

// // Объединение (unite) нескольких объектов в один.
// // Предыдущий урок	Следующий урок
// // В этой части урока рассмотрим способы объединения нескольких объектов в один.

// // Spread-оператор

// // Самый удобный и простой способ объединить несколько объектов в один — использовать spread-оператор.
// // Этот способ очень похож на объединение массивов, который мы изучили ранее.

// // Попробуем объединить два объекта car и carOwner в один — carFullInfo, а также добавим дополнительное свойство additionalInfo:

// const car = {
//   name: "Toyota Corolla",
//   year: 2017,
// };

// const carOwner = {
//   ownerName: "Ivan Ivanov",
//   ownerAge: 27,
// };

// const carFullInfo = {
//   ...car,
//   ...carOwner,
//   additionalInfo: "Дополнительная информация",
// };

// console.log(carFullInfo);
// /*
// {
//   name: 'Toyota Corolla',
//   year: 2017,
//   ownerName: 'Ivan Ivanov',
//   ownerAge: 27,
//   additionalInfo: 'Дополнительная информация'
// }
// */
// // Spread-оператор является современным методом объединения объектов.
// // При этом создается новый объект, который включает в себя все свойства из объединяемых объектов.

// // Если при объединении объектов в них встречаются одинаковые ключи, то применяются те, которые идут последними.
// // Это правило касается как одиночных свойств, так и свойств, полученных с помощью spread-оператора.
// // Поэтому важно следить за порядком следования объектов и свойств:

// const obj1 = { x: 1, y: 1 };
// const obj2 = { x: 2, y: 2 };

// const unitedObj = {
//   ...obj1,
//   ...obj2,
//   y: 3,
// };

// console.log(unitedObj.x); // Выведет 2
// console.log(unitedObj.y); // Выведет 3
// // После объединения двух объектов с одинаковыми ключами x применилось значение из объекта, который был записан позже.
// // Для свойства y также было применено последнее значение, заданное непосредственно в объекте unitedObj.

// Object.assign();

// // Иногда нужно добавить свойства в существующий объект без создания нового объекта.
// // В этом случае на помощь придёт метод Object.assign(), который копирует в целевой объект все свойства из других объектов:

// const car = {
//   name: "Toyota Corolla",
//   year: 2017,
// };

// const carOwner = {
//   ownerName: "Ivan Ivanov",
//   ownerAge: 27,
// };

// Object.assign(car, carOwner);

// console.log(car);
// /*
// {
//   name: 'Toyota Corolla',
//   year: 2017,
//   ownerName: 'Ivan Ivanov',
//   ownerAge: 27
// }
// */
// // В данном примере мы скопировали все свойства из объекта carOwner в целевой объект car.
// // При этом не понадобилось создавать дополнительных переменных.

// // видеоурок
// const developerInfo = {
//   age: 5,
//   expirience: 3,
//   name: "Maxim",
// };

// const developerExtraInfo = {
//   height: 180,
//   isJunior: false,
//   name: "Igor",
// };

// // 1 способ.  Чтобы объединить два объекта в одном необходимо (как и для массивов) применить spread оператор ... - это наиболее
// // современный метод объединения объектов - рекомендуется использовать именно его
// // по сути спред оператор убирает фигурные скобки и оставляет ключи со значениями и , и обединяет их в одном объекте
// const developer = {
//   ...developerInfo,
//   ...developerExtraInfo,
//   name: "Nastya", // заменяем значение ключа, в консоль выведется именно name "Nastya"
// };
// console.log("developer", developer); // developer {age: 5, expirience: 3, name: 'Nastya', height: 180, isJunior: false}

// // если в первом и втором объединяемом объектах будет ключ с одинаковым названием, то в общий объект попадет последний ключ со своим значением

// // 2 способ объединения объектов Object.assign Метод был придуман до spread оператора ...
// const developer2 = Object.assign(developerInfo, developerExtraInfo);
// console.log("developer2", developer2); // developer2 {age: 5, expirience: 3, name: 'Igor', height: 180, isJunior: false}

// =======================================================================
// Операторы spread  и rest (8. Урок от Владилена. Все о Spread и Rest)

const citiesRussia = ["Москва", "Санкт-Петербург", "Казань", "Новосибирск"];
const citiesEurope = ["Берлин", "Прага", "Париж"];


// Spread - работа с массивами.
// Spread разворачивает все элементы массива, убирает из него массив, оставляя сами элементы
console.log(...citiesRussia); // Москва Санкт-Петербург Казань Новосибирск
console.log(...citiesEurope); // Берлин Прага Париж

const allCities = [...citiesRussia, "Борисоглебск", ...citiesEurope];
console.log("allCities", allCities); // ['Москва', 'Санкт-Петербург', 'Казань', 'Новосибирск', 'Борисоглебск', 'Берлин', 'Прага', 'Париж']

// местами меняем запись массивов
const allCities1 = [...citiesEurope, "Борисоглебск", ...citiesRussia];
console.log("allCities1", allCities1); // ['Берлин', 'Прага', 'Париж', 'Борисоглебск', 'Москва', 'Санкт-Петербург', 'Казань', 'Новосибирск']

const allCities2 = citiesEurope.concat(citiesRussia);
console.log("allCities3", allCities2); // ['Берлин', 'Прага', 'Париж', 'Москва', 'Санкт-Петербург', 'Казань', 'Новосибирск']

//$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
// Spread - работа с объектами.
const citiesRussiaWithPopulation = {
  Moscow: 20,
  SaintPetersburg: 8,
  Kazan: 5,
  Novosibirsk: 3,
};
const citiesEuropeWithPopulation = {
  Berlin: 10,
  Praha: 3,
  Paris: 2,
};
// Чтобы оператор spread работал и с объектами, необходимо при его использовании объекты складывать в фигурные скобки
console.log({ ...citiesRussiaWithPopulation }); // Создали новый объект. {Moscow: 20, SaintPetersburg: 8, Kazan: 5, Novosibirsk: 3}

// Сконкатенируем (объединим) один объект с другим:
console.log({ ...citiesRussiaWithPopulation, ...citiesEuropeWithPopulation }); // Moscow: 20, SaintPetersburg: 8, Kazan: 5, Novosibirsk: 3, Berlin: 10, …}
// такой синтаксис используется в React. Здесь происходит умный мёрш (совмещение объектов)
// Если при совмещении двух объектов у них окажется одинаковый ключ, то в результирующий совмещённый объект попадет значение ключа последнего объекта

// Практическое применение spread оператора для объектов
const numbers = [5, 37, 42, 17];
console.log(Math.max(5, 37, 42, 17)); // 42
console.log(Math.max(numbers)); // ошибка
// Math.max на прямую не работает с массивом и он не может найти макс. число в массиве. В этом случае нужно развернуть массив с помощью spread:
console.log(Math.max(...numbers)); // 42
// Раньше когда не было spread из ситуации выходили с помощью применения оператора apply:
console.log(Math.max.apply(null, numbers)); // 42

// spread может быть еще полезен когда, например, в файле html у нас есть несколько <div> и при обращении к ним в
// JavaScript они воспринимаются не как массив, а как группа элементов(node list) и к ним не получится применить, например, метод массивов map и здесь
// на помощь придет spread оператор:
const divs = document.querySelectorAll("div");
const nodes = [...divs];
// с помощью Array.isArray в консоли спрашиваем является ли divs массивом
console.log(divs, Array.isArray(divs));
console.log(nodes, Array.isArray(nodes));

// Rest оператор - похож на spread, тоже ... , но назначение немного другое
function sum(a, b) {
  return a + b;
}

const numbers = [1, 2, 3, 4, 5];

// здесь используем spread
console.log(sum(...numbers)); // 3. Потому что мы разворачиваем массив, но складываем только первые два элемента a + b, то есть 1 + 2
//  и поолучается, что остальные аргументы мы не обрабатываем, потому что мы их не видим
 
// в таком случае применяется оператор rest. Он собирает оставшиеся необработанные аргументы в новый массив
function sum(a, b, ...rest) {
    console.log(rest); // [3, 4, 5]  rest собрал остальные параметры в новый массив
    // с помощью rest  и метода reduce мы можем получить и остальную сумму необработанных ранее элементов (3, 4, 5):
  return a + b + rest.reduce((a, i) => , 0); // 15 Все элементы просуммировались
}

// еще применение оператора rest - когда мы хотим получить значения из массива
const numbers = [1, 2, 3, 4, 5, 6, 7, 8];
const a = numbers[0];
const b = numbers[1];
console.log(a, b); // 1  2

// в ES6 синтаксисе есть более короткая запись с помощью диструктуризации:
const [a, b, ...other] = numbers; // получаем значения  a и b по индексам из массива numbers  и с помощью rest получаем массив
// всех остальных значений в новый массив сохраненный в переменную other
console.log(a, b, other); // 1 2 [3, 4, 5, 6, 7, 8]

// теперь мы хотим получить значения из объекта:
const person {
    name: 'Max',
    age: 20,
    city: 'Moscow',
    country: 'Russia',
}

// применим синтаксис деструктуризации для записи объектов
// получаем первые два значения и также собираем с помощью rest и остальные значения ключей объекта в новый объект, сохранённый в переменную adress 
const {name, age, ...adress} = person;
console.log(numbers, age, adress); // Max 20  {city: 'Moscow', country: 'Russia'}

// spread  и  rest отличаются областью применения
// spread как бы разворачивает массивы и объекты и служит для создания новых массивов или объектов 
// или для трасформации их в какие-то более удобные типы данных 
// rest как бы собирает все параметры либо в массив, что часто встречается в функциях либо в объектах собирает остальные поля 




