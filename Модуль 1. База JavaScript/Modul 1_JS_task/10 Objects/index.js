// Объект — это ассоциативный массив
// В обычных массивах мы обращаемся к элементам по их индексу.
// В ассоциативных массивах доступ к элементам осуществляется по ключу-строке

// Создание объектов
// Объекты можно создавать с помощью фигурных скобок.
// Внутри них следует список свойств и их значений в формате ключ: значение через запятую:

// Пустой объект
const empty = {};

const car = {
  name: "Toyota Corolla",
  year: 2017,
  isNew: false,
};

const developer = {
  // key: value,
  name: "Maxim",
  job: "Front-End разработчик",
  experience: 24,
  jobAllinfo: {
    type: "Front-End",
    frameWork: "ReactJS",
  },
};
console.log("developer", developer);

// 1 способ обращения к элементам объекта по ключу с помощью точки'.' Рекомендуется использовать этот способ
console.log("name", developer.name);
console.log("jobAllinfo", developer.jobAllinfo);

// Для свойств, имена которых состоят из нескольких слов, доступ к значению «через точку» не работает

// 2 способ обращения к элементам объекта по ключу с помощью ['']
// Передаем название ключа в кавычках, это строка

console.log("name", developer["name"]);

const key = "name";
console.log("name", developer[key]);

// Использование [] сработает с любым именем свойства:
let user = {};

// присваивание значения свойству
user["likes birds"] = true;

// получение значения свойства
alert(user["likes birds"]); // true

// удаление свойства
delete user["likes birds"];

// Квадратные скобки также позволяют обратиться к свойству, имя которого может быть результатом выражения.
// Например, имя свойства может храниться в переменной:

let key = "likes birds";

// то же самое, что и user["likes birds"] = true;
user[key] = true;

// В большинстве случаев удобнее обращаться к свойствам через точку.
// Однако обращение через квадратные скобки дает возможность задать значение ключа динамически.
// Следующий код создаст новое свойство с именем color:

const car = {
  name: "Toyota Corolla",
};

const key = "color";
car[key] = "red";

console.log(car);
// { name: 'Toyota Corolla', color: 'red' }

// использование цепочек - обращение к элементам объекта в объекте
// 1-м способом:
console.log("type", developer.jobAllinfo.type);
// 2-м способом:
console.log("frameWork", developer["jobAllinfo"]["frameWork"]);

const car = {
  name: "Toyota Corolla",
  year: 2017,
  isNew: false,
  owner: {
    name: "Ivanov Ivan",
    experience: 5,
  },
};

console.log(car.owner.name); // Ivanov Ivan
console.log(car["owner"]["name"]); // Ivanov Ivan

// Короткая запись свойств
// На практике зачастую возникает необходимость создания объекта со свойствами,
// имена которых аналогичны параметрам функции или переменным:

function createCar(name, year) {
  return {
    name: name,
    year: year,
  };
}
// Для таких случаев есть специальная короткая запись свойств. Такой код будет аналогичен предыдущему:

function createCar(name, year) {
  return {
    name,
    year,
  };
}

// Имя свойства может состоять из нескольких слов, но тогда оно должно быть заключено в кавычки:

let user = {
  name: "John",
  age: 30,
  "likes birds": true, // имя свойства из нескольких слов должно быть в кавычках
};

// Объект, объявленный как константа, может быть изменён
// Объект, объявленный через const, может быть изменён.
// Например:

const user = {
  name: "John",
};

user.name = "Pete"; // (*)

alert(user.name); // Pete

// Может показаться, что строка (*) должна вызвать ошибку, но нет, здесь всё в порядке.
// Дело в том, что объявление const защищает от изменений только саму переменную user, а не её содержимое.
// Определение const выдаст ошибку только если мы присвоим переменной другое значение: user=....

// Опциональная цепочка ?.
// см. 10 Объекты  Опциональная цепочка
