// Операторы сравнения > < >= <= == ===

// console.log(5 > 10); // выдаст false
// console.log(5 < 10); // выдаст true
// console.log(5 <= 10); // выдаст true
// console.log(5 >= 6); // выдаст false
//  //== применятеся, когда нужно проверить равно ли одно число другому
// == (нестрогое сравнение). Сравнивает, пытаясь привести значения к одному типу
//  console.log('==', 100 == 100); // выведет true

// Сравнение строк
//  console.log('JavaScript' == 'Javascript'); // будет false, так как у строк == сравнивает коды символов. У S и s они разные
// console.log('S', 'S'.charCodeAt()); // узнаём код символа S. выведет 83
// console.log('s', 's'.charCodeAt()); // узнаём код символа S. выведет 115
// charCodeAt() определяет код сивола
// JS "под капотом" сравнивает эти числа коды. 115 не равно 83, поэтому выдало false
// JS сравнивает посимвольно по их кодам, то есть сначала J c J, потом a c a  и тд

// == сравнивает значения и производит преобразование типов данных.
// == (нестрогое сравнение). Сравнивает, пытаясь привести значения к одному типу
// === сравнивает типы данных и не производит преобразование типов.
// === (строгое сравнение). Сравнивает без приведения типов (чтобы элементы считались равными, их типы также должны совпадать).

console.log(5 == 6); // false
console.log(5 == "5"); // true
console.log(5 == 5); // true
console.log(1 == true); // true
console.log(true == true); // true
console.log(false == ""); // true
console.log(null == undefined); // true

// != (неравенство). Противоположно нестрогому сравнению (==).
console.log(5 != 6); // true
console.log(5 != "5"); // false
console.log(5 != 5); // false
console.log(1 != true); // false
console.log(true != true); // false
console.log(false != ""); // false
console.log(null != undefined); // false
// === (строгое сравнение). Сравнивает без приведения типов (чтобы элементы считались равными, их типы также должны совпадать).
console.log(5 === 6); // false
console.log(5 === "5"); // false
console.log(5 === 5); // true
console.log(1 === true); // false
console.log(true === true); // true
console.log(false === ""); // false
console.log(null === undefined); // false

// == vs ===
// console.log('1' == 1); // выведет true, так как == включает преобразование типов и '1' как строка под капотом будет преобразована к числу в Number
// // и по сути это будет так 1 == 1. С другими операторами сравнения это работает также
// console.log('1' >= 1); // будет true, здесь приводится '1' к числу
// console.log('20' == '20'); // будет true. Эти строки будут приравниваться посимвольно, они не будут приравниваться к числу перед сравнением
// JavaScript будет сравнивать строки посимвольно до тех пор, пока не найдет первое отличие (в нашем случае '2' и '5', см. пример ниже). После этого, он сравнит 2 этих значения и выведет результат.
// идет сравнение кодов символов, посимвольно по очереди
// console.log('200' > '21'); // будет false, так как код символа 0 меньше кода символа 1. Символ Эти строки будут приравниваться посимвольно, они не будут приравниваться к числу перед сравнением
// console.log(true == 1); // будет true,  так как true преобразуется в число, а это 1 и получается 1 == 1
// console.log('123' < '15'); // true, т. к. '2' < '5'
// console.log(Number(true)); // будет 1, так как мы преобразовали true к типу данных Number, а true это 1
// console.log(false == 0); // будет true, так как мы преобразовали false к типу данных Number, а false это 0

// === лучше использовать именно тройное равно ===, а не двойное равно ==
console.log("1" === 1); // будет false, так как === сравнивает типы данных, а здесь '1' строка и 1 число
console.log(1 === 1); // будет true, так как === сравнивает типы данных, а здесь 1 число и 1 число, соответственно они равны
console.log(true === 1); // будет false, так как === сравнивает типы данных, а здесь false булевый тип, а 1 число, соответственно они не равны

// Сравнение строк
// У каждого символа в строке есть свое числовое значение (от 0 до 65535). Это значение можно получить при помощи метода charCodeAt().
console.log("a".charCodeAt()); // 97
console.log("A".charCodeAt()); // 65

// Также можно в обратную сторону получить символ из числа при помощи метода String.fromCharCode().

console.log(String.fromCharCode(97)); // 'a'
console.log(String.fromCharCode(65)); // 'A'
// Как мы видим, хоть буквы и одинаковые, но от их регистра зависит их числовое значение. При сравнении строк JavaScript будет их сравнивать именно по этим значениям:

console.log("A" < "a"); // true, т. к. 65 < 97
console.log("Javascript" > "JAvascript"); // true, т. к. 'a' > 'A'
console.log("123" < "15"); // true, т. к. '2' < '5'
// В последних двух примерах у нас в строках несколько символов. JavaScript будет сравнивать строки посимвольно до тех пор, пока не найдет первое отличие (в нашем случае 'a' и 'A', '2' и '5'). После этого, он сравнит 2 этих значения и выведет результат.
