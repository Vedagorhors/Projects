// Методы строк
// toUpperCase - эта функция преобразует все символы строчки  в большие символы, т.е. меняет регистр
// toLowerCase - эта функция преобразует все символы строчки  в малые символы, т.е. меняет регистр

const animal = "Lion";
console.log("upper", animal.toUpperCase()); // Выведет upper LION.
// Т.к. toUpperCase функция, то её нужно вызывать, то есть после названия функции ставить кавычки ()
// Функция toUpperCase не принимает никаких параметров, поэтому вызывается функция с помощью кавычек (),
// но в кавычки никакие параметры не вписываются
console.log("lower", animal.toLowerCase()); // Выведет lower lion
// Функция toLowerCase не принимает никаких параметров, поэтому вызывается функция с помощью кавычек (),
// но в кавычки никакие параметры не вписываются

// toUpperCase и toLowerCase не изменяют нашу строчку (Lion), т.е. она остается без изменения. Данные методы возвращают всегда новую строку.
console.log("animal", animal); // Выведет animal lion, т.е. наша строка осталась без изменений

// Нахождение символов в строчке. Методы:
// indexOf - функция находит индекс начала указанной строчки
//includes - функция возвращает булевое значение. Ищет есть ли указанная в функции строка в объявленной строке. Если есть, то выводит true, если нет такой строки, то false
const text = "Мой любимый язык программирования JavaScript";
console.log("indexOf", text.indexOf("JavaScript")); // Выведет indexOf 34. Т.е. находит индекс начала указанной строчки, а именно указывает на индекс J, на его начало
console.log("indexOf", text.indexOf("1234")); // Выведет indexOf -1. Т.е. не находит индекс начала указанной строчки, т.е. такая строчка не найдена
console.log("indexOf", text.indexOf("о")); // Выведет indexOf 1. Т.е. буква о находится под индексом 1. Находится только именно первая буква о, остальные о не учитываются при этом методе

console.log("includes", text.includes("JavaScript")); // Выведет includes true
console.log("includes", text.includes("777")); // Выведет includes false

// Методы обрезки строки - две функции (они одинаковы, вырезают одинаково, можно использовать любую, пусть будет slice):
// slice. Метод (функция) принимает в себя два параметра, которые вставляются в (X, Y):
// 1. Индекс символа, с которого нужно начать извлечение
// 2. Индекс символа, до которого нужно закончить извлечение
// substring - функция принимает два параметра, это индекс, с которого начинаем обрезку и индекс, которым мы заказнчиваем обрезку.
// const programmingLanguage = 'JavaScript';
console.log("slice", programmingLanguage.slice(1, 5)); // Выводит именно то, что вырезал: slice avaS. Т.е. вырезало символы с 1 до 5-го. Напоминаю, символы считаются с 0. Т.е. 0 это курсор стоит перед началом строки. 1-й символ это a, до 5го - это 4-й,
//  т.е. S. Мы  извлекли строку, начиная с символа по индексу 1 до символа с индексом 5, не включая его.
console.log("slice", programmingLanguage.slice(0, 4)); // Выводит slice Java.
console.log("slice", programmingLanguage.slice(3)); // Выводит slice aScript. Можно указывать только первый индекс. Здесь вырезано с 3 индекса и до конца строки.

console.log("substring", programmingLanguage.substring(1, 3)); // Выводит substring av. 1-й индекс это а, с него начинаем обрезку, заканчиваем 3-м индексом - a, не включая его, то есть до 3 символа.
console.log("substring", programmingLanguage.substring(1, 5)); // Выводит substring avaS. 1-й индекс это а, с него начинаем обрезку, заканчиваем 5-м индексом - a, не включая его, то есть до 5 символа.

// методы slice  и substring работают одинаково, поэтому можно пользоваться выбрав для себя один из них, например я выберу slice

// Замена символов в строке. Методы:
// replace (строка которую хотим удалить, строка на которую хотим заменить).
// Он принимает в себя два параметра:
// Строку, которую нужно удалить и Строку, на которую нужно заменить удаленное значение
// replaceAll. Метод replaceAll() принимает в себя те же параметры, что и предыдущий.
// Главное их отличие в том, что replaceAll() находит все необходимые символы (одинаковые) или строки и заменяет их.

const programmingLanguage = "JavaScript";
console.log("replace", programmingLanguage.replace("Script", "")); // replace Java. То есть я заменил на пустую строку "", что значит удали слово Script и оставил только Java
console.log("replace", programmingLanguage.replace("Script", "123")); // replace Java123
console.log("replace", programmingLanguage.replace("a", "A")); // Выведет replace JAvaScript.
// replace меняет только первый попавшийся символ в строке, в данном случае только первую букву а на А
console.log("replace", programmingLanguage.replaceAll("a", "A")); // Выведет replace JAvAScript.
// replace меняет все попавшиеся символы в строке, которые подлежат замене, в данном случае букву а и меняет в строке все а на А

// repeat  Метод - функция, позволяющая повторить строчку несколько раз, сколько мы укажем в параметре ()
// Метод принимает в себя всего один параметр - число, указывающее сколько раз нужно продублировать строку.
const HelloText = "Hello";
console.log("repeat", HelloText.repeat(3)); // Выведет repeat HelloHelloHello  т.е. повторит строку 3 раза, как мы и задали
console.log(HelloText.repeat(3)); // Выведет HelloHelloHello без нашего поясняющего слова Repeat т.е. повторит строку 3 раза, как мы и задали

// trim Метод. С помощью данной функции можно удалять лишние пробелы в начале и в конце строки. При этом пробелы между словами он не трогает
// Функция не принимает никаких параметров, поэтому в () для вызова функции пусто
const nameOfUser = prompt("Как Вас зовут?"); // создаем переменную nameOfUser и вызываем функцию модального окна с запросом prompt.
// появится модальное окно с запросом ввести пользователю своё имя. Когда имя введено, оно будет сохранено в переменной nameOfUser
console.log("nameOfUser", nameOfUser); // Выведет nameOfUser Ivan
// Если же пользователь некорректно вводит имя, например с пробелами в начале и конце строки, то,
// чтобы удалить эти пробелы применяют функцию trim
console.log("nameOfUser", nameOfUser.trim()); // В случае, если пользователь в модальное окно ввел своё имя некорректно
// с пробелами в начале и в конце, то методом trim тo удалим лишние пробелы в начале и в конце строкиЫ
